version: '3.8'

services:
  # Portainer CE
  # Managing containers via nice web UI
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    ports:
      - "9000:9000/tcp"
    environment:
      - TZ=Europe/Lisbon
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${ALBERTO_HOME_DIR}/portainer:/data
  
  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ${ALBERTO_HOME_DIR}/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    #devices:
      # - /dev/ttyUSB0:/dev/ttyUSB0
    restart: unless-stopped
    privileged: true
    network_mode: host
  
  # Duplicati
  # Free backup software to store encrypted backups online
  duplicati:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati
    env_file:
      - .env
    volumes:
      - ${ALBERTO_HOME_DIR}/duplicati/config/:/config
      - ${ALBERTO_HOME_DIR}:/source
    ports:
      - 8200:8200
    restart: unless-stopped
  
  # MariaDB
  # A database Nginx Proxy Manager and Umami
  db:
    container_name: db
    image: mariadb
    restart: unless-stopped
    volumes:
      - ${ALBERTO_HOME_DIR}/mariadb/dbdata:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
      - ${ALBERTO_HOME_DIR}/db:/docker-entrypoint-initdb.d # FIX entrypoint
    env_file:
      - .env
  
  # Adminer
  # A dead-simple database manager
  adminer:
    container_name: adminer
    image: adminer
    restart: unless-stopped
    environment:
      ADMINER_PLUGINS: frames
    ports:
      - 8082:8080
    depends_on:
      - db
  
  # Nginx Proxy Manager
  # Nice and simple Nginx UI for managing reverce proxy
  nginx:
    container_name: nginx
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    ports:
      - 80:80 # HTTP port
      - 443:443 # HTTPS port
      - 8081:81 # Admin Paner port
    environment:
      DB_MYSQL_HOST: ${MYSQL_HOST}
      DB_MYSQL_PORT: ${MYSQL_PORT}
      DB_MYSQL_USER: ${MYSQL_USER}
      DB_MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      DB_MYSQL_NAME: 'nginxproxymanager'
    volumes:
      - ${ALBERTO_HOME_DIR}/nginx-proxy-manager/data:/data
      - ${ALBERTO_HOME_DIR}/nginx-proxy-manager/letsencrypt:/etc/letsencrypt
      - ${ALBERTO_HOME_DIR}/nginx-proxy-manager/log:/var/log
    depends_on:
      - db

  # Mosquitto
  # Message broker that implements the MQTT protocol 
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "1884:1884"
    volumes:
      - "${ALBERTO_HOME_DIR}/mosquitto/config:/mosquitto/config"
      - "${ALBERTO_HOME_DIR}/mosquitto/data:/mosquitto/data"
      - "${ALBERTO_HOME_DIR}/mosquitto/log:/mosquitto/log"
    env_file:
      - .env

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    restart: unless-stopped
    volumes:
      - "${ALBERTO_HOME_DIR}/zigbee2mqtt/data:/app/data"
      - /run/udev:/run/udev:ro
    ports:
      # Frontend port
      - 8080:8080
    devices:
      # Make sure this matched your adapter location
      - /dev/ttyUSB0:/dev/ttyUSB0
    env_file:
      - .env
    depends_on:
      - mosquitto

  # WireGuard Easy
  # WireGuard is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography
  # Be sure to forward UDP port 51820 from your router.
  wg-easy:
    container_name: wg-easy
    image: weejewel/wg-easy
    restart: unless-stopped
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - "${ALBERTO_HOME_DIR}/wireguard:/etc/wireguard"
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.wireguard-rtr.entrypoints=https"
      - "traefik.http.routers.wireguard-rtr.rule=HostHeader(`WG_HOST`)"
      - "traefik.http.routers.wireguard-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.wireguard-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.wireguard-rtr.service=wireguard-svc"
      - "traefik.http.services.wireguard-svc.loadbalancer.server.port=51821"
      ## UDP
      - "traefik.udp.routers.wireguard-udp.entrypoints=wireguard"
      - "traefik.udp.routers.wireguard-udp.service=wireguard-udp-svc"
      - "traefik.udp.services.wireguard-udp-svc.loadbalancer.server.port=51820"